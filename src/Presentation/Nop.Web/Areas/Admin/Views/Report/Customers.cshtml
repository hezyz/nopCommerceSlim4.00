@model CustomerReportsSearchModel

@inject IEventPublisher eventPublisher

@{
    //page title
    ViewBag.Title = T("Admin.Reports.Customers").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Customer reports");
}

<nop-antiforgery-token/>

<div class="content-header clearfix">
    <h1 class="pull-left">
        @T("Admin.Reports.Customers")
    </h1>
    <div class="pull-right">
        &nbsp;
        @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.CustomerReportsButtons })
    </div>
</div>

<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="registered-customers-grid"></div>
                    <script>
                $(document).ready(function () {
                    $("#registered-customers-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("ReportRegisteredCustomersList", "Report"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors"
                            },
                            error: function (e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(Model.RegisteredCustomers.PageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(Model.RegisteredCustomers.AvailablePageSizes)],
                            @await Html.PartialAsync("_GridPagerMessages")
                        },
                        editable: {
                            confirmation: "@T("Admin.Common.DeleteConfirmation")",
                            mode: "inline"
                        },
                        scrollable: false,
                        columns: [{
                            field: "Period",
                            title: "@T("Admin.Reports.Customers.RegisteredCustomers.Fields.Period")"
                        }, {
                            field: "Customers",
                            title: "@T("Admin.Reports.Customers.RegisteredCustomers.Fields.Customers")",
                            width: 150
                        }]
                    });
                });
                    </script>
                </div>
            </div>
        </div>
    </div>
</div>

